trigger:
- main

variables:
  python.version: '3.7.6'
  terraform.version: '0.13.4'
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: Terraform
    displayName: Run Terraform
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraform.version)

    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'EnsuringQualityReleasesSC'
        backendAzureRmResourceGroupName: 'QA_Project_RG'
        backendAzureRmStorageAccountName: 'qaprojectstorage'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'EnsuringQualityReleasesSC'
        vars: |
          app_service_name = "FakeRestAPIApp"
          resource_group_name = "QA_Project_RG"

- stage: Deploy
  displayName: Deploy FakeRestAPI
  dependsOn: BuildAndTest
  jobs:
  - deployment: DeployWebApp
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'EnsuringQualityReleasesSC'
              appName: 'FakeRestAPIApp'
              package: '**/*.zip'
              runtimeStack: 'NODE|16-lts'
              appSettings: |
                WEBSITE_RUN_FROM_PACKAGE=0
