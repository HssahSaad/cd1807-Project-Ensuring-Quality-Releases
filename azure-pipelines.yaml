trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: Terraform
    displayName: 'Run Terraform'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'terraform'
        backendServiceArm: 'AzureServiceConnection'
        backendAzureRmResourceGroupName: 'RG-QA'
        backendAzureRmStorageAccountName: 'storageqa123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform'
        environmentServiceNameAzureRM: 'AzureServiceConnection'
        args: '-auto-approve'

  - job: Postman
    displayName: 'Run Postman Tests'
    dependsOn: Terraform
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g newman
        newman run automatedtesting/postman/RegressionTestSuite.json
        newman run automatedtesting/postman/DataValidationTestSuite.json
      displayName: 'Run Postman Collections'

- stage: Deploy
  displayName: 'Deploy FakeRestAPI'
  dependsOn: BuildAndTest
  jobs:
  - deployment: DeployWebApp
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'AzureServiceConnection'
              appName: '$(APP_SERVICE_NAME)'
              package: '**/*.zip'
              runtimeStack: 'NODE|16-lts'
              appSettings: >
                -WEBSITE_RUN_FROM_PACKAGE 0
