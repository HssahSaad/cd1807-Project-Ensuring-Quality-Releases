# ===== Trigger =====
trigger:
- main

# ===== Self-hosted agent on your VM =====
pool:
  name: Default   # غيّرها إذا كان اسم الـPool عندك مختلف

# ===== Variables =====
variables:
  - group: eqr-secrets          # اسم مجموعة المتغيّرات (تحتوي CLIENT_ID/CLIENT_SECRET/TENANT_ID/SUBSCRIPTION_ID)
  - name: Azuredevops
    value: eqr-dev-rg           # غيّره لاسم RG عندك
  - name: APP_NAME_PREFIX
    value: eqr-fakerestapi-     # بادئة أسماء الويب آب اللي تنشئها Terraform (بنختار الأحدث بالبادئة هذه)
  - name: APP_ZIP
    value: build/app.zip        # مسار ملف الـzip الذي سننشره

# ========================= CI =========================
stages:
- stage: BuildAndTest
  displayName: "Build & Test"
  jobs:
  - job: ci
    displayName: "Lint & unit tests"
    steps:
      - checkout: self

      # نثبّت Python 3.10 ونضيفه للـPATH (لا نستخدم apt نهائياً)
      - task: UsePythonVersion@0
        displayName: "Use Python 3.10"
        inputs:
          versionSpec: '3.10'
          addToPath: true

      # إنشاء venv + تثبيت الأدوات + lint + tests
      - bash: |
          set -euxo pipefail

          python --version
          which python

          # إنشاء بيئة افتراضية
          python -m venv .venv
          . .venv/bin/activate

          # تحديث أدوات البايثون الأساسية
          python -m pip install --upgrade pip setuptools wheel

          # لو عندك requirements.txt ثبّتها
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

          # أدوات الفحص والاختبار بإصدارات متوافقة
          pip install "flake8<7" "pytest<9"

          # Lint (استثناء مجلدات لا نحتاجها)
          flake8 . --exclude .venv,build,.git --max-line-length 120

          # اختبارات: اسمح بعدم وجود اختبارات (Exit code 5)
          pytest -q || if [ $$? -eq 5 ]; then echo "No tests collected"; else exit 1; fi
        displayName: "Ensure Python + venv + lint & tests"

      # إنشاء ملف zip للتطبيق
      - bash: |
          set -euxo pipefail

          mkdir -p build
          zip -r "$(APP_ZIP)" . \
            -x ".git/*" ".venv/*" "build/*" "__pycache__/*" "*.pyc"
          ls -lh "$(APP_ZIP)"
        displayName: "Package app (zip)"

      # نشر الآرتيفاكت (الـzip)
      - publish: $(APP_ZIP)
        artifact: appzip
        displayName: "Publish artifact"

# ========================= CD =========================
- stage: Deploy
  displayName: "Deploy to App Service"
  dependsOn: BuildAndTest
  jobs:
  - deployment: deploy
    displayName: "Zip deploy"
    environment: "dev"   # غيّرها لاسم Environment اللي عندك إن وُجد
    strategy:
      runOnce:
        deploy:
          steps:
            # تنزيل الآرتيفاكت اللي رفعناه في الـCI
            - download: current
              artifact: appzip

            # تسجيل الدخول في Azure + نشر الـzip + smoke test
            - bash: |
                set -euxo pipefail

                # ثبّت Azure CLI لو مش موجود
                if ! command -v az >/dev/null 2>&1; then
                  curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                fi

                # تسجيل الدخول بواسطة Service Principal (من variable group)
                az login --service-principal \
                  -u "$CLIENT_ID" -p "$CLIENT_SECRET" --tenant "$TENANT_ID" >/dev/null

                az account set --subscription "$SUBSCRIPTION_ID"

                # إحضار أحدث Web App يبدأ بالبادئة المحددة
                APP_NAME="$(az webapp list -g "$(RESOURCE_GROUP)" \
                  --query "reverse(sort_by([?starts_with(name, '$(APP_NAME_PREFIX)')], &name))[:1].name" -o tsv)"

                if [ -z "$APP_NAME" ]; then
                  echo "No webapp matching '$(APP_NAME_PREFIX)' in RG '$(RESOURCE_GROUP)'." >&2
                  exit 1
                fi
                echo "Deploying to: ${APP_NAME}"

                # Zip deploy
                az webapp deployment source config-zip \
                  -g "$(RESOURCE_GROUP)" -n "${APP_NAME}" \
                  --src "$(Pipeline.Workspace)/appzip/app.zip"

                # Smoke check
                HOST="$(az webapp show -g "$(RESOURCE_GROUP)" -n "${APP_NAME}" --query "defaultHostName" -o tsv)"
                echo "Smoke check https://${HOST}/"
                curl -I --max-time 20 "https://${HOST}/" || true
              displayName: "Login + Deploy (zip) + smoke check"
              env:
                CLIENT_ID: $(CLIENT_ID)
                CLIENT_SECRET: $(CLIENT_SECRET)
                TENANT_ID: $(TENANT_ID)
                SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
