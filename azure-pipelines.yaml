# azure-pipelines.yml
trigger: none

pool:
  name: myAgentPool   # <-- اسم الـ self-hosted agent pool

variables:
  System.Debug: 'true'
  azureServiceConnectionId: 'AzureServiceConnection'   # <-- اسم الـ Service Connection (OIDC)
  TF_VERSION: '1.8.5'

  # إعدادات الـ backend (عدّليها حسب حساب التخزين عندك)
  TF_BACKEND_RG: 'Azuredevops'
  TF_BACKEND_SA: 'tfstate3193425499'
  TF_BACKEND_CONTAINER: 'tfstate'
  TF_BACKEND_KEY: 'test.terraform.tfstate'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: Install Terraform + init/plan/apply (AAD/OIDC)
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        inlineScript: |
          set -eo pipefail
          set -x

          echo "=== Agent info ==="
          uname -a || true
          echo "PWD=$(pwd)"
          echo "Tree:"
          ls -la || true

          # تحقق من وجود ملفات Terraform
          if [ ! -f "./main.tf" ]; then
            echo "ERROR: main.tf غير موجود في $(pwd). صححي workingDirectory أو أضيفي ملفات .tf."
            exit 2
          fi

          # 1) تثبيت Terraform بدون اعتماد على unzip أو sudo (باستخدام Python)
          mkdir -p "$HOME/bin"
          export PATH="$HOME/bin:$PATH"
          if ! command -v terraform >/dev/null 2>&1; then
            echo "Installing Terraform ${TF_VERSION} ..."
            TF_ZIP="/tmp/terraform_${TF_VERSION}_linux_amd64.zip"
            curl -L -o "$TF_ZIP" "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"

            # فك الضغط عبر Python (يتجنب الاعتماد على unzip)
            python3 - <<'PY'
            import zipfile, sys, os
            src = "/tmp/terraform_1.8.5_linux_amd64.zip".replace("1.8.5", os.environ.get("TF_VERSION","1.8.5"))
            dst = "/tmp"
          with zipfile.ZipFile(src, 'r') as z:
          z.extractall(dst)
          print("Extracted to", dst)
          PY
            mv -f /tmp/terraform "$HOME/bin/terraform"
            chmod +x "$HOME/bin/terraform"
          fi
          terraform --version

          # 2) تأكيد الدخول من الـ Service Connection
          az account show --query '{sub:id, tenant:tenantId, user:user}' -o table

          # 3) ضمان وجود حاوية tfstate (يتطلب RBAC: Storage Blob Data Contributor)
          az storage container create \
            --name "$(TF_BACKEND_CONTAINER)" \
            --account-name "$(TF_BACKEND_SA)" \
            --auth-mode login || true

          # 4) Terraform init باستخدام AAD للـ backend (بدون access keys)
          terraform init -input=false -no-color \
            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \
            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \
            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \
            -backend-config="key=$(TF_BACKEND_KEY)" \
            -backend-config="use_azuread_auth=true"

          # 5) Validate + Plan + Apply
          terraform validate -no-color
          terraform plan -input=false -no-color -out=tfplan
          terraform apply -input=false -no-color -auto-approve tfplan
