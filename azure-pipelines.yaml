# azure-pipelines.yml
trigger: none

pool:
  name: myAgentPool

variables:
  System.Debug: 'true'
  azureServiceConnectionId: 'AzureServiceConnection'
  TF_VERSION: '1.8.5'

  TF_BACKEND_RG: 'Azuredevops'
  TF_BACKEND_SA: 'tfstate3193425499'
  TF_BACKEND_CONTAINER: 'tfstate'
  TF_BACKEND_KEY: 'test.terraform.tfstate'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    timeoutInMinutes: 120
    steps:
    - checkout: self

    # ==============================
    # Terraform INIT + VALIDATE + PLAN
    # ==============================
    - task: AzureCLI@2
      displayName: Terraform INIT/VALIDATE/PLAN
      timeoutInMinutes: 120
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        workingDirectory: '$(Build.SourcesDirectory)/terraform/environments/test'
        inlineScript: |
          set -eo pipefail
          set -x

          # keepalive loop so DevOps doesn't cancel on silence
          while true; do echo "Still running Terraform INIT/PLAN... $(date)"; sleep 300; done &

          echo "=== DEBUG: Starting Terraform PLAN ==="

          # ---- OIDC authentication
          export ARM_USE_OIDC=true
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_TENANT_ID="$tenantId"
          export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
          export ARM_OIDC_TOKEN="$idToken"

          # ---- Ephemeral SSH key
          mkdir -p "$HOME/.ssh"
          ssh-keygen -t rsa -b 4096 -N "" -f "$HOME/.ssh/azdo_ephemeral" -q
          ADMIN_PUB_KEY="$(cat "$HOME/.ssh/azdo_ephemeral.pub")"
          export TF_VAR_admin_ssh_public_key="$ADMIN_PUB_KEY"
          export TF_VAR_admin_username="azureuser"

          # ---- Install Terraform
          mkdir -p "$HOME/bin"
          export PATH="$HOME/bin:$PATH"
          TF_ZIP="/tmp/terraform_${TF_VERSION}_linux_amd64.zip"
          curl -sSL -o "$TF_ZIP" "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
          python3 -m zipfile -e "$TF_ZIP" /tmp
          mv -f /tmp/terraform "$HOME/bin/terraform"
          chmod +x "$HOME/bin/terraform"
          terraform --version

          # ---- Terraform init
          terraform init -input=false -no-color \
            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \
            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \
            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \
            -backend-config="key=$(TF_BACKEND_KEY)" \
            -backend-config="use_azuread_auth=true"

          # ---- Terraform validate & plan
          terraform validate -no-color
          terraform plan -input=false -no-color -out=tfplan

    # ==============================
    # Terraform APPLY
    # ==============================
    - task: AzureCLI@2
      displayName: Terraform APPLY
      timeoutInMinutes: 120
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        workingDirectory: '$(Build.SourcesDirectory)/terraform/environments/test'
        inlineScript: |
          set -eo pipefail
          set -x

          while true; do echo "Still running Terraform APPLY... $(date)"; sleep 300; done &

          export ARM_USE_OIDC=true
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_TENANT_ID="$tenantId"
          export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
          export ARM_OIDC_TOKEN="$idToken"

          export TF_VAR_admin_username="azureuser"

          # Apply from saved plan
          terraform apply -input=false -no-color -auto-approve tfplan
