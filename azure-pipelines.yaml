# azure-pipelines.yml
trigger: none

pool:
  name: myAgentPool

variables:
  System.Debug: 'true'
  azureServiceConnectionId: 'AzureServiceConnection'
  TF_VERSION: '1.8.5'

  TF_BACKEND_RG: 'Azuredevops'
  TF_BACKEND_SA: 'tfstate3193425499'
  TF_BACKEND_CONTAINER: 'tfstate'
  TF_BACKEND_KEY: 'test.terraform.tfstate'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: Install Terraform + init/plan/apply (AAD/OIDC)
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        workingDirectory: '$(Build.SourcesDirectory)/terraform/environments/test'
        inlineScript: |
          set -eo pipefail
          set -x

          echo "=== DEBUG ==="
          echo "BUILD_SOURCESDIRECTORY=$BUILD_SOURCESDIRECTORY"
          echo "PWD=$(pwd)"
          ls -la

          # ---- OIDC for Terraform (critical) ----
          export ARM_USE_OIDC=true
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_TENANT_ID="$tenantId"
          # get subscription id from the logged-in context
          export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID"


          # 1) Install the exact Terraform version (overwrite any preinstalled one)
          mkdir -p "$HOME/bin"
          export PATH="$HOME/bin:$PATH"
          TF_ZIP="/tmp/terraform_${TF_VERSION}_linux_amd64.zip"
          curl -sSL -o "$TF_ZIP" "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
          python3 -m zipfile -e "$TF_ZIP" /tmp
          mv -f /tmp/terraform "$HOME/bin/terraform"
          chmod +x "$HOME/bin/terraform"
          terraform --version

          # 2) Confirm Azure login from service connection
          az account show --query '{sub:id, tenant:tenantId, user:user}' -o table

          # 3) Ensure tfstate container exists (needs Blob Data Contributor on the SA)
          az storage container create \
            --name "$(TF_BACKEND_CONTAINER)" \
            --account-name "$(TF_BACKEND_SA)" \
            --auth-mode login >/dev/null 2>&1 || true

          # 4) Terraform init using AAD (OIDC)
          echo "=== Terraform INIT ==="
          terraform init -input=false -no-color \
            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \
            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \
            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \
            -backend-config="key=$(TF_BACKEND_KEY)" \
            -backend-config="use_azuread_auth=true"

          # 5) Validate + Plan + Apply
          terraform validate -no-color
          terraform plan -input=false -no-color -out=tfplan
          terraform apply -input=false -no-color -auto-approve tfplan
