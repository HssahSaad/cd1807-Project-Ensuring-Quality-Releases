trigger:
  branches:
    include:
      - main   # شغّل البايبلاين على أي دفع (commit) لفرع main

# شغّل على الـ self-hosted agent اللي عندك
pool:
  name: myAgentPool       # غيّرها إذا كان اسم الـ pool مختلف عندك

# المتغيّرات
variables:
- group: eqr-secrets         # يحتوي CLIENT_ID / CLIENT_SECRET / TENANT_ID / SUBSCRIPTION_ID

- name: RESOURCE_GROUP
  value: eqr-dev-rg

- name: APP_NAME_PREFIX
  value: eqr-fakerestapi-

- name: APP_ZIP
  value: build/app.zip


stages:
# ================= CI =================
- stage: BuildAndTest
  displayName: "Build & Test"
  jobs:
  - job: ci
    displayName: "Lint & unit tests"
    steps:
    - checkout: self

    - bash: |
        set -euxo pipefail
        export DEBIAN_FRONTEND=noninteractive

        # أدوات أساسية
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl zip unzip python3 python3-pip python3-venv python3-distutils

        # لو pip مفقود على نسخة بايثون قديمة
        if ! python3 -m pip --version >/dev/null 2>&1; then
          curl -sS https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py
          sudo -H python3 get-pip.py
        fi

        # حافظ على نسخ متوافقة
        python3 -m pip install --upgrade "pip<22.0" "setuptools<60" wheel

        # أنشئ venv (مع بديل virtualenv لو فشل)
        if ! python3 -m venv .venv >/dev/null 2>&1; then
          python3 -m pip install "virtualenv==20.24.5"
          python3 -m virtualenv -p python3 .venv
        fi

        . .venv/bin/activate
        python -V
        python -m pip --version

        # تثبيت متطلبات المشروع + أدوات الفحص والاختبار
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install "flake8<6" "pytest<8"

        # Lint (تجاهل مجلدات معينة)
        flake8 . --exclude .venv,build,.git --max-line-length 120

        # اختبارات (لو ما فيه اختبارات، اعتبره نجاح)
        pytest -q || if [ $? -eq 5 ]; then echo "No tests collected"; else exit 1; fi
      displayName: "Ensure Python + venv + lint & tests"

    - bash: |
        set -euxo pipefail
        mkdir -p build
        zip -r "$(APP_ZIP)" . \
          -x ".git/*" ".venv/*" "build/*" "__pycache__/*" "*.pyc"
        ls -lh "$(APP_ZIP)"
      displayName: "Package app (zip)"

    - publish: $(APP_ZIP)
      artifact: appzip
      displayName: "Publish artifact"

# ================= CD =================
- stage: Deploy
  displayName: "Deploy to App Service"
  dependsOn: BuildAndTest
  jobs:
  - deployment: deploy
    displayName: "Zip deploy"
    environment: "dev"   # ممكن تغيّرها لاسم Environment عندك أو احذف السطر لو ما تحتاج approvals
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: appzip

          - bash: |
              set -euxo pipefail

              # ثبّت Azure CLI لو مش موجود (على self-hosted غالباً مفيد)
              if ! command -v az >/dev/null 2>&1; then
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              fi

              # ---- تسجيل الدخول بخدمة الخدمة (Service Principal) ----
              az login --service-principal \
                -u "$CLIENT_ID" -p "$CLIENT_SECRET" --tenant "$TENANT_ID" >/dev/null

              az account set --subscription "$SUBSCRIPTION_ID"

              # ابحث عن أحدث WebApp يبدأ بالبادئة المحددة داخل نفس RG
              APP_NAME="$(az webapp list -g "$(RESOURCE_GROUP)" \
                --query "reverse(sort_by([?starts_with(name, '$(APP_NAME_PREFIX)')], &name))[:1].name" -o tsv || true)"

              if [ -z "${APP_NAME}" ]; then
                echo "No webapp matching '$(APP_NAME_PREFIX)' in RG '$(RESOURCE_GROUP)'." >&2
                exit 1
              fi

              echo "Deploying to: ${APP_NAME}"

              # نشر ZIP
              az webapp deployment source config-zip \
                -g "$(RESOURCE_GROUP)" -n "${APP_NAME}" \
                --src "$(Pipeline.Workspace)/appzip/app.zip"

              # Smoke check
              HOST="$(az webapp show -g "$(RESOURCE_GROUP)" -n "${APP_NAME}" --query "defaultHostName" -o tsv)"
              echo "Smoke check https://${HOST}/"
              curl -I --max-time 20 "https://${HOST}/" || true
            displayName: "Login + Deploy (zip) + smoke check"
            env:
              CLIENT_ID: $(CLIENT_ID)
              CLIENT_SECRET: $(CLIENT_SECRET)
              TENANT_ID: $(TENANT_ID)
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
