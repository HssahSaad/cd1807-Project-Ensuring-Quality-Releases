# =========================
# azure-pipelines.yaml
# =========================

trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  # اسم خدمة الاتصال (Service connection) في Project Settings > Service connections
  AZURE_SERVICE_CONNECTION: "AzureServiceConnection"

  # مجلد ملفات Terraform داخل الريبو
  TF_WORKDIR: "terraform/environments/dev"   # <-- بدل "terraform"

  # نسخة Terraform التي سنثبتها يدوياً
  TF_VERSION: "1.6.6"

  # متغيرات للبنية التحتية (عدّلها لتناسبك)
  PROJECT_NAME: "qa-project"
  LOCATION: "eastus"
  RESOURCE_GROUP_NAME: "qa-rg"
  WEBAPP_NAME: "qa-fakerestapi-$(Build.SourceVersion)"

stages:
# ----------------------------------------------------
# 1) Build & Terraform
# ----------------------------------------------------
- stage: BuildAndTerraform
  displayName: "Build & Terraform"
  jobs:
  - job: Terraform
    displayName: "Terraform init/plan/apply"
    steps:
      - checkout: self
        clean: true

      # أدوات أساسية
      - bash: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y curl unzip jq
        displayName: "Install base tools"

      # تثبيت Terraform يدوياً (بدون أي Tasks من Marketplace)
      - bash: |
          set -euxo pipefail
          echo "==> Installing Terraform $(TF_VERSION)"
          curl -fsSL -o tf.zip "https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip"
          sudo unzip -o tf.zip -d /usr/local/bin
          rm -f tf.zip
          terraform version
        displayName: "Install Terraform"

      # خطوة تشخيصية كاملة عبر AzureCLI
      - task: AzureCLI@2
        displayName: "Terraform init/plan/apply (diagnostic)"
        inputs:
          azureSubscription: "$(AZURE_SERVICE_CONNECTION)"
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            set -euo pipefail

            echo "==> az account show"
            az account show

            echo "==> Print repo root and files"
            pwd
            ls -la

            echo "==> Checking TF workdir: $(TF_WORKDIR)"
            ls -la "$(TF_WORKDIR)"

            cd "$(TF_WORKDIR)"

            echo "==> Terraform version"
            terraform version

            echo "==> Create variables.auto.tfvars from pipeline variables"
            cat > variables.auto.tfvars <<EOF
            project_name        = "${PROJECT_NAME}"
            location            = "${LOCATION}"
            resource_group_name = "${RESOURCE_GROUP_NAME}"
            webapp_name         = "${WEBAPP_NAME}"
            EOF

            echo "==> variables.auto.tfvars content:"
            cat variables.auto.tfvars

            echo "==> terraform init"
            terraform init -upgrade -input=false -no-color

            echo "==> terraform validate"
            terraform validate -no-color

            echo "==> terraform plan"
            terraform plan -out=tfplan -input=false -no-color || { echo 'PLAN FAILED'; exit 1; }

            echo "==> terraform show (plan)"
            terraform show -no-color tfplan || true

            echo "==> terraform apply"
            terraform apply -auto-approve -input=false -no-color tfplan

# ----------------------------------------------------
# 2) Deploy (اختياري/Placeholder) — فعلّه لاحقاً بعد نجاح الـ TF
# ----------------------------------------------------
- stage: Deploy
  displayName: "Deploy (placeholder)"
  dependsOn: BuildAndTerraform
  condition: succeeded()
  jobs:
  - job: DeployPlaceholder
    steps:
      - bash: echo "Deploy stage will go here after TF succeeds."
        displayName: "Deploy placeholder"
