trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  AZURE_SERVICE_CONNECTION: "AzureServiceConnection"
  tfWorkingDirectory: "terraform"
  TF_VERSION: "1.6.6"

stages:
- stage: BuildAndTest
  displayName: "Build and Test"
  jobs:
  - job: RunTerraform
    displayName: "Run Terraform"
    steps:
    - checkout: self
      persistCredentials: true

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: "$(TF_VERSION)"

    - bash: |
        set -euo pipefail
        echo "TF dir: $(tfWorkingDirectory)"
        mkdir -p "$(tfWorkingDirectory)"
        if ! ls "$(tfWorkingDirectory)"/*.tf >/dev/null 2>&1; then
          cat >"$(tfWorkingDirectory)/main.tf" <<'EOF'
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
EOF
        fi
        echo "TF files ready."
      displayName: "Ensure Terraform config exists"

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: azurerm
        command: init
        workingDirectory: "$(tfWorkingDirectory)"

    - task: TerraformTaskV4@4
      displayName: "Terraform Validate"
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: "$(tfWorkingDirectory)"

    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: azurerm
        command: plan
        workingDirectory: "$(tfWorkingDirectory)"
        environmentServiceNameAzureRM: "$(AZURE_SERVICE_CONNECTION)"

    - task: TerraformTaskV4@4
      displayName: "Terraform Apply"
      inputs:
        provider: azurerm
        command: apply
        commandOptions: "-auto-approve"
        workingDirectory: "$(tfWorkingDirectory)"
        environmentServiceNameAzureRM: "$(AZURE_SERVICE_CONNECTION)"
