# azure-pipelines.yaml
# Trigger: manual for now. غيّرها لاحقًا لو تبغى على فروع معيّنة.
trigger: none

# استخدم Microsoft-hosted agent
pool:
  vmImage: ubuntu-latest

# ========= Variables =========
variables:
  System.Debug: 'true'

  # اسم اتصال Azure DevOps Service Connection (OIDC)
  azureServiceConnectionId: 'AzureServiceConnection'

  # Terraform
  TF_VERSION: '1.8.5'

  # Backend (tfstate)
  TF_BACKEND_RG: 'Azuredevops'
  TF_BACKEND_SA: 'tfstate3193425499'
  TF_BACKEND_CONTAINER: 'tfstate'
  TF_BACKEND_KEY: 'test.terraform.tfstate'

  # متغيّرات Terraform للموديلات (عدّلها حسب مشروعك)
  TF_VAR_project_name:        'qa-project'
  TF_VAR_location:            'westeurope'
  TF_VAR_resource_group_name: 'eqr-dev-rg'
  # اسم الويب آب بيتكوّن لاحقًا من الموديول، هنا مجرد مثال:
  TF_VAR_webapp_name:         'qa-fakerestapi-$(Build.SourceVersion)'

stages:
- stage: Build
  displayName: Build (Terraform + Artifacts)
  jobs:
  - job: BuildInfrastructure
    displayName: Build Infrastructure + Package Tests
    steps:
    - checkout: self
      persistCredentials: true

    # ===== Terraform (init/plan/apply) =====
    - task: AzureCLI@2
      displayName: Terraform init/plan/apply (AAD/OIDC)
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        workingDirectory: '$(Build.SourcesDirectory)/terraform/environments/test'
        inlineScript: |
          set -eo pipefail
          echo "==> az account show"
          az account show

          echo "==> Print repo root and files"
          echo "$(Build.SourcesDirectory)"
          ls -la "$(Build.SourcesDirectory)" || true

          echo "==> Check terraform working dir: $(pwd)"
          ls -la || true

          # 0) Ephemeral SSH key for this run (علشان vm module لو يطلب مفتاح)
          mkdir -p "$HOME/.ssh"
          ssh-keygen -t rsa -b 4096 -N "" -f "$HOME/.ssh/azdo_ephemeral" -q
          export TF_VAR_admin_ssh_public_key="$(cat "$HOME/.ssh/azdo_ephemeral.pub")"
          export TF_VAR_admin_username="azureuser"

          # ---- OIDC for Terraform (critical) ----
          export ARM_USE_OIDC=true
          export ARM_CLIENT_ID="$servicePrincipalId"
          export ARM_TENANT_ID="$tenantId"
          export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
          export ARM_OIDC_TOKEN="$idToken"

          # 1) Install the exact Terraform version
          mkdir -p "$HOME/bin"
          export PATH="$HOME/bin:$PATH"
          TF_ZIP="/tmp/terraform_${TF_VERSION}_linux_amd64.zip"
          curl -sSL -o "$TF_ZIP" "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
          python3 -m zipfile -e "$TF_ZIP" /tmp
          mv -f /tmp/terraform "$HOME/bin/terraform"
          chmod +x "$HOME/bin/terraform"
          terraform -version

          # 2) Ensure tfstate container exists
          az storage container create \
            --name "$(TF_BACKEND_CONTAINER)" \
            --account-name "$(TF_BACKEND_SA)" \
            --auth-mode login >/dev/null 2>&1 || true

          # 3) Terraform init using AAD (OIDC)
          echo "=== Terraform INIT ==="
          terraform init -input=false -no-color \
            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \
            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \
            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \
            -backend-config="key=$(TF_BACKEND_KEY)" \
            -backend-config="use_azuread_auth=true"

          # 4) Validate + Plan + Apply
          terraform validate -no-color
          terraform plan -input=false -no-color -out=tfplan
          terraform apply -input=false -no-color -auto-approve tfplan

    # ===== Verify test folders exist =====
    - script: |
        echo "==> Verify test folders exist"
        ls -la automatedtesting || true
        ls -la automatedtesting/selenium || true
        ls -la automatedtesting/jmeter || true
        ls -la automatedtesting/jmeter/fakerestapi || true
        ls -la automatedtesting/jmeter/test-suite || true
      displayName: Verify test folders

    # ===== Archive test packages =====
    - task: ArchiveFiles@2
      displayName: Archive selenium/
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium.zip'
        replaceExistingArchive: true

    - task: ArchiveFiles@2
      displayName: Archive jmeter/fakerestapi/
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi.zip'
        replaceExistingArchive: true

    - task: ArchiveFiles@2
      displayName: Archive jmeter/test-suite/
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/jmeter-tests.zip'
        replaceExistingArchive: true

    # ===== Publish artifacts =====
    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts (selenium, fakerestapi, jmeter-tests)
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'
