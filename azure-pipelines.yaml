trigger:
  branches:
    include:
      - main

pool:
  vmImage: windows-latest   # نستخدم Windows agent

variables:
- group: eqr-secrets        # لازم يكون موجود بالـ Library > Variable groups
- name: RESOURCE_GROUP
  value: eqr-dev-rg
- name: APP_NAME_PREFIX
  value: eqr-fakerestapi-
- name: APP_ZIP
  value: build/app.zip

stages:

# ================= CI =================
- stage: BuildAndTest
  displayName: Build & Test
  jobs:
  - job: ci
    displayName: Lint & unit tests
    steps:
    - checkout: self

    # تشغيل flake8 + pytest
    - task: PowerShell@2
      displayName: Run lint & unit tests
      inputs:
        targetType: inline
        pwsh: true
        script: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Ensure Python tools..."
          python --version
          pip --version
          pip install flake8 pytest
          flake8 . --exclude .venv,build,.git --max-line-length 120
          pytest -q
          if ($LASTEXITCODE -eq 5) {
            Write-Host "No tests collected"
            exit 0
          }
          exit $LASTEXITCODE

    # (اختياري) التأكد من Chocolatey على Windows
    - task: PowerShell@2
      displayName: Ensure Chocolatey
      inputs:
        targetType: inline
        pwsh: false      # نستخدم Windows PowerShell
        script: |
          $ErrorActionPreference = 'Stop'
          if (Get-Command choco.exe -ErrorAction SilentlyContinue) {
            Write-Host "Chocolatey already installed:"
            choco --version
          } else {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-Expression ((New-Object Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            choco --version
          }

    # إنشاء ملف zip ونشره كـ artifact
    - task: PowerShell@2
      displayName: Package app (zip)
      inputs:
        targetType: inline
        pwsh: true
        script: |
          New-Item -ItemType Directory -Force -Path build | Out-Null
          Compress-Archive -Path * -DestinationPath "$(APP_ZIP)" -Force
          Get-ChildItem build

    - publish: $(APP_ZIP)
      artifact: appzip
      displayName: Publish artifact


# ================= CD =================
- stage: Deploy
  displayName: Deploy to App Service
  dependsOn: BuildAndTest
  jobs:
  - deployment: deploy
    displayName: Zip deploy
    environment: dev
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: appzip

          - task: PowerShell@2
            displayName: Login + Deploy (zip) + smoke check
            env:
              CLIENT_ID: $(CLIENT_ID)
              CLIENT_SECRET: $(CLIENT_SECRET)
              TENANT_ID: $(TENANT_ID)
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
            inputs:
              targetType: inline
              pwsh: true
              script: |
                $ErrorActionPreference = 'Stop'

                az login --service-principal -u "$env:CLIENT_ID" -p "$env:CLIENT_SECRET" --tenant "$env:TENANT_ID" | Out-Null
                az account set --subscription "$env:SUBSCRIPTION_ID"

                $appName = az webapp list -g "$(RESOURCE_GROUP)" --query "reverse(sort_by([?starts_with(name, '$(APP_NAME_PREFIX)')], &name))[:1].name" -o tsv
                if (-not $appName) {
                  Write-Error "No webapp found with prefix '$(APP_NAME_PREFIX)' in RG '$(RESOURCE_GROUP)'."
                  exit 1
                }

                Write-Host "Deploying to: $appName"
                az webapp deployment source config-zip `
                  -g "$(RESOURCE_GROUP)" -n $appName `
                  --src "$(Pipeline.Workspace)/appzip/app.zip"

                $host = az webapp show -g "$(RESOURCE_GROUP)" -n $appName --query "defaultHostName" -o tsv
                Write-Host "Smoke check https://$host/"
                try {
                  (Invoke-WebRequest -Uri "https://$host/" -Method Head -TimeoutSec 20).StatusCode
                } catch {
                  Write-Warning "Smoke check failed: $($_.Exception.Message)"
                }
