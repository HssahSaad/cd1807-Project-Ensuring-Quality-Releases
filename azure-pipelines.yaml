name: Azure Pipelines

trigger:
- main

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Terraform install
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.2.9'

    # Terraform init
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: ''    
        backendAzureRmStorageAccountName: ''
        backendAzureRmContainerName: ''
        backendAzureRmKey: 'test.terraform.tfstate'

    # Terraform validate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Terraform apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Postman - Install Newman
    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    # Postman - Run Data Validation
    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman - Run Regression
    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman - Publish Results
    - task: PublishTestResults@2
      displayName: 'Publish Postman JUnit Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman API Tests'

    # Selenium - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    # Selenium - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Upload UI Tests Package'
      artifact: drop-uitests

    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    # FakeRestAPI - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    # JMeter - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

    # JMeter - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Performance Tests Package'
      artifact: drop-perftests

#--------------------------------------------#
# DEPLOYMENT STAGE 
#--------------------------------------------#
# - stage: Deploy
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: 'your-env-name'    
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: '$(azureServiceConnectionId)'
#               appName: 'your-app-service-name'
#               appType: 'webApp'
#               package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
#
#           - task: CmdLine@2
#             inputs:
#               script: |
#                 wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz"
#                 tar -xf apache-jmeter-5.2.1.tgz
#                 unzip -o $(Build.BuildId)-perftests.zip
#                 ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
#                 cat jmeter.log
#               workingDirectory: '$(Pipeline.Workspace)/drop-perftests'
#
#   - deployment: VMDeploy
#     displayName: Selenium Tests
#     environment:
#       name: 'your-vm-env-name'
#       resourceType: VirtualMachine
#       tags: selenium
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop-uitests
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |
#                 #! /bin/bash
