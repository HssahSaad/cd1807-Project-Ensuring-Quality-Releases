# ========= Azure DevOps pipeline (Windows) =========
# CI: Lint + Unit tests + Package ZIP + Publish artifact
# CD: Zip deploy to Azure App Service (finds newest app by prefix)
# Secrets group required: eqr-secrets (CLIENT_ID, CLIENT_SECRET, TENANT_ID, SUBSCRIPTION_ID)

trigger:
  branches:
    include:
      - main

# استخدم Windows agent عشان PowerShell + UsePythonVersion يكون متوفر
pool:
  vmImage: 'windows-latest'

variables:
  - group: eqr-secrets        # تأكد أن هذي المجموعة موجودة وبها الأسرار المطلوبة
  - name: RESOURCE_GROUP
    value: 'eqr-dev-rg'       # <-- غيّرها لاسم RG عندك
  - name: APP_NAME_PREFIX
    value: 'eqr-fakerestapi-' # <-- غيّرها لبريفكس مواقعك (الويب آب)
  - name: APP_ZIP
    value: 'build/app.zip'

stages:

# =========================== CI ===========================
- stage: BuildAndTest
  displayName: 'Build & Test'
  jobs:
    - job: ci
      displayName: 'Lint & unit tests + package'
      steps:
        - checkout: self

        # اختَر نسخة Python من التولكاش على windows-latest
        - task: UsePythonVersion@0
          displayName: 'Use Python 3.10'
          inputs:
            versionSpec: '3.10'
            addToPath: true
            architecture: 'x64'

        # إنشاء venv + تنصيب flake8/pytest + lint + tests
        - pwsh: |
            $ErrorActionPreference = 'Stop'
            Write-Host "Create venv..."
            python -m venv .venv
            .\.venv\Scripts\python --version
            .\.venv\Scripts\python -m pip install --upgrade pip setuptools wheel
            if (Test-Path "requirements.txt") {
              .\.venv\Scripts\pip install -r requirements.txt
            }
            .\.venv\Scripts\pip install flake8 pytest
            Write-Host "Run flake8..."
            .\.venv\Scripts\flake8 . --exclude .venv,build,.git --max-line-length 120
            Write-Host "Run pytest..."
            .\.venv\Scripts\pytest -q
          displayName: 'Create venv + lint & tests'

        # إصلاح مشكلة "file in use": احذف app.zip إذا موجود، ثم أنشئه من جديد
        - pwsh: |
            $ErrorActionPreference = 'Stop'
            New-Item -ItemType Directory -Force -Path (Split-Path '$(APP_ZIP)') | Out-Null
            if (Test-Path '$(APP_ZIP)') {
              Write-Host "Old $(APP_ZIP) found. Deleting..."
              Remove-Item -Force '$(APP_ZIP)'
            }
            Write-Host "Create ZIP: $(APP_ZIP)"
            # استبعد مجلدات لا نبيها داخل الـ zip
            $source = "$(Build.SourcesDirectory)"
            $zip    = "$(APP_ZIP)"
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            # نبني zip في مسار مؤقت ثم ننقله لضمان عدم قفله من العملية
            $tmp = Join-Path ([System.IO.Path]::GetTempPath()) ("app_{0}.zip" -f ([guid]::NewGuid()))
            [System.IO.Compression.ZipFile]::CreateFromDirectory($source, $tmp)
            Move-Item -Force $tmp $zip
            if (-not (Test-Path $zip)) { throw "ZIP was not created" }
            Write-Host "ZIP created at $zip"
          displayName: 'Package app (zip)'

        # نشر الـ artifact
        - publish: $(APP_ZIP)
          artifact: appzip
          displayName: 'Publish artifact'

# =========================== CD ===========================
- stage: Deploy
  displayName: 'Deploy to App Service'
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
    - deployment: deploy
      displayName: 'Zip deploy'
      environment: 'dev'           # عدِّل لو عندك اسم بيئة مختلف
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: appzip

              # تسجيل الدخول + تحديد الاشتراك + إيجاد اسم الويب آب عبر الـ prefix + zip deploy + smoke check
              - pwsh: |
                  $ErrorActionPreference = 'Stop'

                  Write-Host "Azure CLI login (service principal)..."
                  az login --service-principal `
                    -u "$(CLIENT_ID)" -p "$(CLIENT_SECRET)" `
                    --tenant "$(TENANT_ID)" --output none

                  az account set --subscription "$(SUBSCRIPTION_ID)"

                  Write-Host "Find newest webapp in RG '$(RESOURCE_GROUP)' with prefix '$(APP_NAME_PREFIX)'..."
                  $appName = az webapp list `
                    -g "$(RESOURCE_GROUP)" `
                    --query "[?starts_with(name, '$(APP_NAME_PREFIX)')].name | sort(@) | [-1]" -o tsv

                  if (-not $appName) {
                    throw "No webapp found in RG '$(RESOURCE_GROUP)' with prefix '$(APP_NAME_PREFIX)'."
                  }
                  Write-Host "Deploying to: $appName"

                  $zipPath = "$(Pipeline.Workspace)\appzip\app.zip"
                  if (-not (Test-Path $zipPath)) { throw "Artifact zip not found at $zipPath" }

                  Write-Host "Zip deploy..."
                  az webapp deployment source config-zip `
                    -g "$(RESOURCE_GROUP)" -n $appName --src $zipPath --output none

                  $host = az webapp show -g "$(RESOURCE_GROUP)" -n $appName --query "defaultHostName" -o tsv
                  Write-Host "Smoke check https://$host/"
                  try {
                    $resp = Invoke-WebRequest -Uri ("https://{0}/" -f $host) -UseBasicParsing -TimeoutSec 20
                    Write-Host ("Status: {0}" -f $resp.StatusCode)
                  } catch {
                    Write-Warning "Smoke check failed: $($_.Exception.Message)"
                  }
                displayName: 'Login + find app + zip deploy + smoke check'
                env:
                  CLIENT_ID: $(CLIENT_ID)
                  CLIENT_SECRET: $(CLIENT_SECRET)
                  TENANT_ID: $(TENANT_ID)
                  SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
